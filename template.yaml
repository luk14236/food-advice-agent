AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Two-bot favorite-foods with API Gateway, Orchestrator in existing VPC, RDS Postgres, Secrets Manager, and VPC Endpoints (no NAT).

Globals:
  Function:
    Runtime: python3.12
    Timeout: 15
    MemorySize: 512
    Tracing: Active
  Api:
    Cors:
      AllowMethods: "'OPTIONS,DELETE,PUT,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  OpenAIKeyParam:
    Type: String
    NoEcho: true
    Description: OpenAI API key

  # Use recursos EXISTENTES
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC Id (e.g., vpc-0a6481a4c2979705a)
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two or more PRIVATE subnet IDs in this VPC (comma-separated)

  # RDS
  DBName:
    Type: String
    Default: appdb
  DBUsername:
    Type: String
    Default: appuser
  DBInstanceClass:
    Type: String
    Default: db.t4g.micro
    AllowedPattern: "db\\..+"
  AllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20

Resources:
  ################################
  # API Gateway (público)
  ################################
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: !Join [ " ", [ { "Ref": "AWS::StackName" }, "usage plan" ] ]
          Quota:
            Limit: 100000
            Period: DAY
          Throttle:
            BurstLimit: 1000
            RateLimit: 100
          UsagePlanName: !Join [ "", [ { "Ref": "AWS::StackName" }, "-usage-plan" ] ]

  ################################
  # Security Groups + SubnetGroup
  ################################
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda egress to RDS/VPC endpoints
      VpcId: !Ref VpcId

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres 5432 from Lambdas
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Existing VPC private subnets for Postgres
      SubnetIds: !Ref PrivateSubnetIds

  ################################
  # Secrets Manager (senha gerada)
  ################################
  DBPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Master credentials for the Postgres RDS
      GenerateSecretString:
        SecretStringTemplate: !Sub |
          {"username":"${DBUsername}"}
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"\/@`'
        RequireEachIncludedType: true

  ################################
  # RDS Postgres (privado)
  ################################
  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: "16.3"
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref AllocatedStorage
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBPasswordSecret}:SecretString:password}}'
      DBName: !Ref DBName
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: false
      BackupRetentionPeriod: 1
      MultiAZ: false
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  ################################
  # VPC Endpoints (sem NAT)
  ################################
  VPCEndpointLambda:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.lambda"
      VpcEndpointType: Interface
      SubnetIds: !Ref PrivateSubnetIds
      SecurityGroupIds: [ !Ref LambdaSecurityGroup ]
      PrivateDnsEnabled: true

  VPCEndpointSecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      SubnetIds: !Ref PrivateSubnetIds
      SecurityGroupIds: [ !Ref LambdaSecurityGroup ]
      PrivateDnsEnabled: true

  VPCEndpointLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcEndpointType: Interface
      SubnetIds: !Ref PrivateSubnetIds
      SecurityGroupIds: [ !Ref LambdaSecurityGroup ]
      PrivateDnsEnabled: true

  VPCEndpointKMS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.kms"
      VpcEndpointType: Interface
      SubnetIds: !Ref PrivateSubnetIds
      SecurityGroupIds: [ !Ref LambdaSecurityGroup ]
      PrivateDnsEnabled: true

  ################################
  # Lambdas públicas (sem VPC)
  ################################
  AnswerBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/answer-bot/
      Handler: app.handler
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIKeyParam
      Events:
        PostAnswer:
          Type: Api
          Properties:
            Path: /answer
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: true

  AskBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ask-bot/
      Handler: app.handler
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIKeyParam
      Events:
        PostAsk:
          Type: Api
          Properties:
            Path: /ask
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: true

  ################################
  # Orchestrator (na VPC privada)
  ################################
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/orchestrator/
      Handler: app.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref AnswerBotFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref AskBotFunction
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Ref DBPasswordSecret
      Environment:
        Variables:
          LAMBDA_GENERATOR_NAME: !Ref AnswerBotFunction
          LAMBDA_PARSER_NAME: !Ref AskBotFunction
          PG_HOST: !GetAtt PostgresDB.Endpoint.Address
          PG_PORT: !GetAtt PostgresDB.Endpoint.Port
          PG_DB: !Ref DBName
          PG_SECRET_ARN: !Ref DBPasswordSecret
      Events:
        PostSimulate:
          Type: Api
          Properties:
            Path: /simulate
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: true

Outputs:
  ApiUrl:
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Description: API base URL
  RdsEndpoint:
    Value: !GetAtt PostgresDB.Endpoint.Address
    Description: RDS Postgres endpoint
  OrchestratorName:
    Value: !Ref OrchestratorFunction
    Description: Orchestrator Lambda name
